<%- layout('layout/acctBoilerplate', { title: 'xInvest - Automated Trading' })
%> <%- partial("partials/floatingNav") %> <%- partial('partials/sideBar') %>

<div class="dashboard">
  <!-- Page Header -->
  <div class="page-header glass">
    <h1 class="page-title">Automated Trading</h1>
    <p class="page-subtitle">
      Select your trading pair, choose from your purchased plans, and let
      AI-powered algorithms maximize your returns
    </p>
  </div>

  <!-- Live Price Ticker -->
  <div class="live-ticker glass" id="liveTicker">
    <div class="ticker-content">
      <div class="selected-pair-info">
        <div class="pair-display" id="selectedPairDisplay">Select a pair</div>
        <div class="current-price" id="currentPrice">$0.00</div>
        <div class="price-change" id="priceChange">
          <span class="live-indicator"></span>
          <span id="changePercent">+0.00%</span>
        </div>
      </div>
      <div class="ticker-actions">
        <button class="btn-invest" id="startInvestBtn" disabled>
          <i class="fas fa-robot"></i>
          Start Trading Bot
        </button>
      </div>
    </div>
  </div>

  <div class="trading-container">
    <!-- Left Column: Market & Bot Selection -->
    <div class="trading-left">
      <!-- Market Selection -->
      <div class="market-section glass-card">
        <h2 class="section-title">
          <i class="fas fa-chart-bar"></i>
          Select Trading Pair
        </h2>

        <div class="market-tabs">
          <button class="market-tab active" data-market="forex">Forex</button>
          <button class="market-tab" data-market="crypto">
            Cryptocurrency
          </button>
          <button class="market-tab" data-market="indices">Indices</button>
        </div>

        <!-- Forex Pairs -->
        <div class="pairs-grid" id="forexPairs">
          <div
            class="pair-card glass-card"
            data-symbol="EURUSD"
            data-type="forex"
          >
            <div class="pair-header">
              <div class="pair-symbol">EUR/USD</div>
              <div class="pair-change change-up">+0.12%</div>
            </div>
            <div class="pair-price">1.08742</div>
            <div class="pair-name">Euro / US Dollar</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="GBPUSD"
            data-type="forex"
          >
            <div class="pair-header">
              <div class="pair-symbol">GBP/USD</div>
              <div class="pair-change change-up">+0.08%</div>
            </div>
            <div class="pair-price">1.27185</div>
            <div class="pair-name">British Pound / US Dollar</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="USDJPY"
            data-type="forex"
          >
            <div class="pair-header">
              <div class="pair-symbol">USD/JPY</div>
              <div class="pair-change change-down">-0.05%</div>
            </div>
            <div class="pair-price">148.234</div>
            <div class="pair-name">US Dollar / Japanese Yen</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="AUDUSD"
            data-type="forex"
          >
            <div class="pair-header">
              <div class="pair-symbol">AUD/USD</div>
              <div class="pair-change change-up">+0.15%</div>
            </div>
            <div class="pair-price">0.65218</div>
            <div class="pair-name">Australian Dollar / US Dollar</div>
          </div>
        </div>

        <!-- Crypto Pairs -->
        <div class="pairs-grid" id="cryptoPairs" style="display: none">
          <div
            class="pair-card glass-card"
            data-symbol="BTCUSDT"
            data-type="crypto"
          >
            <div class="pair-header">
              <div class="pair-symbol">BTC/USDT</div>
              <div class="pair-change change-up">+1.24%</div>
            </div>
            <div class="pair-price">$42,189.50</div>
            <div class="pair-name">Bitcoin / Tether</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="ETHUSDT"
            data-type="crypto"
          >
            <div class="pair-header">
              <div class="pair-symbol">ETH/USDT</div>
              <div class="pair-change change-down">-0.32%</div>
            </div>
            <div class="pair-price">$2,534.72</div>
            <div class="pair-name">Ethereum / Tether</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="XRPUSDT"
            data-type="crypto"
          >
            <div class="pair-header">
              <div class="pair-symbol">XRP/USDT</div>
              <div class="pair-change change-up">+2.15%</div>
            </div>
            <div class="pair-price">$0.6234</div>
            <div class="pair-name">Ripple / Tether</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="SOLUSDT"
            data-type="crypto"
          >
            <div class="pair-header">
              <div class="pair-symbol">SOL/USDT</div>
              <div class="pair-change change-up">+3.42%</div>
            </div>
            <div class="pair-price">$98.76</div>
            <div class="pair-name">Solana / Tether</div>
          </div>
        </div>

        <!-- Indices Pairs -->
        <div class="pairs-grid" id="indicesPairs" style="display: none">
          <div
            class="pair-card glass-card"
            data-symbol="US30"
            data-type="indices"
          >
            <div class="pair-header">
              <div class="pair-symbol">US30</div>
              <div class="pair-change change-up">+0.45%</div>
            </div>
            <div class="pair-price">34,567.89</div>
            <div class="pair-name">Dow Jones Industrial Average</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="NAS100"
            data-type="indices"
          >
            <div class="pair-header">
              <div class="pair-symbol">NAS100</div>
              <div class="pair-change change-down">-0.12%</div>
            </div>
            <div class="pair-price">15,234.56</div>
            <div class="pair-name">NASDAQ 100</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="SPX500"
            data-type="indices"
          >
            <div class="pair-header">
              <div class="pair-symbol">SPX500</div>
              <div class="pair-change change-up">+0.28%</div>
            </div>
            <div class="pair-price">4,567.89</div>
            <div class="pair-name">S&P 500</div>
          </div>

          <div
            class="pair-card glass-card"
            data-symbol="UK100"
            data-type="indices"
          >
            <div class="pair-header">
              <div class="pair-symbol">UK100</div>
              <div class="pair-change change-up">+0.35%</div>
            </div>
            <div class="pair-price">7,456.78</div>
            <div class="pair-name">FTSE 100</div>
          </div>
        </div>
      </div>

      <!-- Trading View Chart -->
      <div class="chart-section glass-card">
        <h2 class="section-title">
          <i class="fas fa-chart-line"></i>
          Live Market Chart
        </h2>
        <div class="chart-container" id="tradingview-chart">
          <div class="chart-placeholder">
            <i class="fas fa-chart-line"></i>
            <p>Select a trading pair to view live chart</p>
          </div>
        </div>
      </div>

      <!-- Available Plans -->
      <div class="bot-section glass-card">
        <div class="section-header">
          <h2 class="section-title">
            <i class="fas fa-robot"></i>
            Your Trading Plans
          </h2>
          <a href="/dashboard/bots" class="btn-secondary">
            <i class="fas fa-shopping-cart"></i>
            Buy More Plans
          </a>
        </div>

        <div class="bots-grid" id="userPlansGrid">
          <!-- User's purchased plans will be populated here -->
          <div class="no-plans-message" id="noPlansMessage">
            <i
              class="fas fa-robot"
              style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5"
            ></i>
            <h3>No Trading Plans Available</h3>
            <p>You haven't purchased any trading plans yet.</p>
            <a href="/dashboard/bots" class="btn-primary">
              <i class="fas fa-shopping-cart"></i>
              Browse Plans
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Right Column: Investment Form -->
    <div class="investment-form glass">
      <h2 class="section-title">
        <i class="fas fa-cogs"></i>
        Investment Setup
      </h2>

      <form id="investmentForm">
        <!-- Selected Pair Display -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-exchange-alt"></i>
            Trading Pair
          </label>
          <input
            type="text"
            class="form-input"
            id="selectedPair"
            name="pair"
            readonly
            placeholder="Select a trading pair"
          />
        </div>

        <!-- Plan Selection -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-robot"></i>
            Trading Plan
          </label>
          <select
            class="form-input form-select"
            id="planSelect"
            name="planId"
            required
            disabled
          >
            <option value="">Select a plan</option>
            <!-- Options will be populated from user's purchased plans -->
          </select>
          <div class="form-hint" id="planHint">
            <a href="/dashboard/bots">Purchase plans to start trading</a>
          </div>
        </div>

        <!-- Investment Amount -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-dollar-sign"></i>
            Investment Amount (USD)
          </label>
          <input
            type="number"
            class="form-input"
            id="investmentAmount"
            name="amount"
            min="50"
            max="100000"
            step="50"
            placeholder="Enter amount (USD)"
            required
            disabled
          />

          <div class="amount-slider">
            <div class="slider-labels">
              <span>$50</span>
              <span>$100,000</span>
            </div>
            <div class="slider-container">
              <input
                type="range"
                class="slider"
                id="amountSlider"
                min="50"
                max="100000"
                step="50"
                value="1000"
                disabled
              />
            </div>
          </div>

          <div class="balance-info">
            <span>Available Balance:</span>
            <span id="availableBalance">$0.00</span>
          </div>
          <div class="crypto-balances">
            <span>BTC: <span id="btcBalance">0.00</span></span>
            <span>ETH: <span id="ethBalance">0.00</span></span>
            <span>USDT: <span id="usdtBalance">0.00</span></span>
          </div>
          <div class="crypto-info" id="cryptoRequired"></div>
        </div>

        <!-- Investment Period -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-calendar-alt"></i>
            Investment Period (Days)
          </label>
          <select
            class="form-input form-select"
            id="investmentPeriod"
            name="period"
            required
            disabled
          >
            <option value="">Select period</option>
            <!-- Options will be populated dynamically based on plan selection -->
          </select>
        </div>

        <!-- Risk Level -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-shield-alt"></i>
            Risk Level
          </label>
          <select
            class="form-input form-select"
            id="riskLevel"
            name="riskLevel"
            required
            disabled
          >
            <option value="low">Low (Conservative)</option>
            <option value="medium" selected>Medium (Balanced)</option>
            <option value="high">High (Aggressive)</option>
          </select>
        </div>

        <!-- Payment Method -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-wallet"></i>
            Payment Method
          </label>
          <select
            class="form-input form-select"
            id="paymentMethod"
            name="paymentMethod"
            required
            disabled
          >
            <option value="">Select payment method</option>
            <option value="btc">BTC</option>
            <option value="eth">ETH</option>
          </select>
        </div>

        <!-- Investment Summary -->
        <div class="investment-summary">
          <h4 style="margin-bottom: 1rem; color: white">Investment Summary</h4>

          <div class="summary-item">
            <span class="summary-label">Estimated Profit Range:</span>
            <span class="summary-value" id="estimatedProfitRange">0% - 0%</span>
          </div>

          <div class="summary-item">
            <span class="summary-label">Platform Fee (2%):</span>
            <span class="summary-value" id="platformFee">$0.00</span>
          </div>

          <div class="summary-item">
            <span class="summary-label">Potential Return:</span>
            <span class="summary-value" id="potentialReturn"
              >$0.00 - $0.00</span
            >
          </div>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn-invest" id="submitBtn" disabled>
          <i class="fas fa-rocket"></i>
          Start Automated Trading
        </button>
      </form>
    </div>
  </div>

  <!-- Active Investments Section -->
  <div
    class="active-investments glass"
    id="activeInvestmentsSection"
    style="display: none"
  >
    <h2 class="section-title">
      <i class="fas fa-chart-line"></i>
      Active Investments
    </h2>
    <div class="investments-grid" id="activeInvestmentsList">
      <!-- Active investments will be populated here -->
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", async function () {
    // Prices fetched for October 22, 2025
    const prices = {
      btc: 108031.13,
      eth: 3874.6,
      usdt: 1,
    };

    // Initialize variables
    let selectedPair = null;
    let selectedPlan = null;
    let currentPrice = 0;
    let wallet = {};
    let activeInvestments = [];
    let userPlans = [];
    let priceUpdateInterval;
    let profitUpdateIntervals = {};
    let currentChart = null;
    let profitPollingInterval;

    // Load data from backend
    async function loadData() {
      try {
        const [walletRes, plansRes, investmentsRes] = await Promise.all([
          fetch("/dashboard/invest/wallet"),
          fetch("/dashboard/invest/plans"),
          fetch("/dashboard/invest/active"),
        ]);

        wallet = await walletRes.json();
        userPlans = await plansRes.json();
        activeInvestments = await investmentsRes.json();

        localStorage.setItem("xinvest_wallet", JSON.stringify(wallet));
        localStorage.setItem("xinvest_user_plans", JSON.stringify(userPlans));
        localStorage.setItem(
          "xinvest_active_investments",
          JSON.stringify(activeInvestments)
        );

        updatePlansDisplay();
        updatePlanSelect();
        updateActiveInvestments();
        updateBalanceDisplay();
      } catch (error) {
        console.error("Error loading data:", error);
        // Fallback to localStorage
        wallet = JSON.parse(localStorage.getItem("xinvest_wallet")) || {
          totalBalance: 10000,
          BTC: 0.1,
          ETH: 2,
          USDT: 5000,
        };
        userPlans =
          JSON.parse(localStorage.getItem("xinvest_user_plans")) || [];
        activeInvestments =
          JSON.parse(localStorage.getItem("xinvest_active_investments")) || [];
        updatePlansDisplay();
        updatePlanSelect();
        updateActiveInvestments();
        updateBalanceDisplay();
      }
    }

    // Load user's purchased plans
    function loadUserPlans() {
      // Already loaded in loadData
    }

    // Update plans display grid
    function updatePlansDisplay() {
      const plansGrid = document.getElementById("userPlansGrid");
      const noPlansMessage = document.getElementById("noPlansMessage");

      plansGrid.innerHTML = "";
      if (userPlans.length === 0) {
        noPlansMessage.style.display = "block";
        plansGrid.appendChild(noPlansMessage);
      } else {
        noPlansMessage.style.display = "none";
        userPlans.forEach((plan) => {
          const planCard = createPlanCard(plan);
          plansGrid.appendChild(planCard);
        });
      }
    }

    // Create plan card element
    function createPlanCard(plan) {
      const card = document.createElement("div");
      card.className = `bot-card glass-card ${
        plan.status === "active" ? "" : "inactive"
      }`;
      card.dataset.planId = plan.id;

      let badgeIcon, tagClass;
      switch (plan.planType) {
        case "welbuilder":
          badgeIcon = "fas fa-bolt";
          tagClass = "tag-welbuilder";
          break;
        case "premium":
          badgeIcon = "fas fa-chart-line";
          tagClass = "tag-premium";
          break;
        case "elite":
          badgeIcon = "fas fa-infinity";
          tagClass = "tag-elite";
          break;
      }

      card.innerHTML = `
        <div class="bot-header">
          <div class="bot-info">
            <span class="bot-tag ${tagClass}">${plan.name}</span>
            <h3>${plan.strategy}</h3>
            <p class="bot-description">${plan.description}</p>
            <div class="profit-range">Profit Range: ${plan.profitMin}% - ${
        plan.profitMax
      }%</div>
            <div class="plan-status ${
              plan.status === "active" ? "status-active" : "status-inactive"
            }">
              ${plan.status === "active" ? "Active" : "Inactive"}
            </div>
          </div>
          <div class="bot-badge">
            <i class="${badgeIcon}"></i>
          </div>
        </div>
        <div class="bot-stats">
          <div class="stat-item">
            <div class="stat-value">${plan.avgReturn}%</div>
            <div class="stat-label">Avg. Return</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${plan.periodMin}${
        plan.periodMax === Infinity ? "+" : "-" + plan.periodMax
      }</div>
            <div class="stat-label">Days</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${plan.winRate}%</div>
            <div class="stat-label">Win Rate</div>
          </div>
        </div>
        <div class="bot-features">
          ${plan.features
            .map((feature) => `<span class="feature-tag">${feature}</span>`)
            .join("")}
        </div>
      `;

      if (plan.status === "active") {
        card.addEventListener("click", () => selectPlan(plan));
      }

      return card;
    }

    // Update plan select dropdown
    function updatePlanSelect() {
      const planSelect = document.getElementById("planSelect");
      const planHint = document.getElementById("planHint");

      planSelect.innerHTML = '<option value="">Select a plan</option>';

      if (userPlans.length === 0) {
        planSelect.disabled = true;
        planHint.style.display = "block";
      } else {
        planHint.style.display = "none";
        userPlans
          .filter((plan) => plan.status === "active")
          .forEach((plan) => {
            const option = document.createElement("option");
            option.value = plan.planType;
            option.textContent = `${plan.name} (${plan.profitMin}%-${plan.profitMax}%)`;
            planSelect.appendChild(option);
          });
        planSelect.disabled = false;
      }

      updateFormState();
    }

    // Select a plan
    function selectPlan(plan) {
      document
        .querySelectorAll(".bot-card")
        .forEach((card) => card.classList.remove("selected"));
      const selectedCard = document.querySelector(
        `.bot-card[data-plan-id="${plan.id}"]`
      );
      if (selectedCard) selectedCard.classList.add("selected");

      selectedPlan = plan;

      document.getElementById("planSelect").value = plan.planType;

      updateInvestmentPeriods(plan);

      updateEstimatedReturns();

      updateFormState();
      updateStartButton();
    }

    // Update investment period options based on plan
    function updateInvestmentPeriods(plan) {
      const periodSelect = document.getElementById("investmentPeriod");
      periodSelect.innerHTML = '<option value="">Select period</option>';

      let max = plan.periodMax === Infinity ? 365 : plan.periodMax;
      for (let day = plan.periodMin; day <= max; day++) {
        const option = document.createElement("option");
        option.value = day;
        option.textContent = `${day} day${day > 1 ? "s" : ""}`;
        periodSelect.appendChild(option);
      }
      if (plan.periodMax === Infinity) {
        const option = document.createElement("option");
        option.value = "indefinite";
        option.textContent = "Indefinite";
        periodSelect.appendChild(option);
      }
    }

    // Update form state based on selections
    function updateFormState() {
      const hasActivePlans = userPlans.some((plan) => plan.status === "active");
      const formInputs = document.querySelectorAll(
        "#investmentForm input:not(#selectedPair), #investmentForm select"
      );

      formInputs.forEach(
        (input) => (input.disabled = !(hasActivePlans && selectedPlan))
      );
      document.getElementById("amountSlider").disabled = !(
        hasActivePlans && selectedPlan
      );
    }

    // Market Tab Switching
    const marketTabs = document.querySelectorAll(".market-tab");
    marketTabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        marketTabs.forEach((t) => t.classList.remove("active"));
        tab.classList.add("active");
        const market = tab.dataset.market;
        document
          .querySelectorAll(".pairs-grid")
          .forEach((grid) => (grid.style.display = "none"));
        document.getElementById(`${market}Pairs`).style.display = "grid";
      });
    });

    // Pair Selection
    const pairCards = document.querySelectorAll(".pair-card");
    pairCards.forEach((card) => {
      card.addEventListener("click", () => {
        pairCards.forEach((c) => c.classList.remove("selected"));
        card.classList.add("selected");

        selectedPair = {
          symbol: card.dataset.symbol,
          type: card.dataset.type,
          price: parseFloat(
            card
              .querySelector(".pair-price")
              .textContent.replace(/[^0-9.]/g, "")
          ),
          name: card.querySelector(".pair-name").textContent,
          change: card.querySelector(".pair-change").textContent,
        };

        // Update ticker
        document.getElementById("selectedPairDisplay").textContent =
          card.querySelector(".pair-symbol").textContent;
        document.getElementById("currentPrice").textContent =
          card.querySelector(".pair-price").textContent;
        document.getElementById("changePercent").textContent =
          selectedPair.change;
        const priceChange = document.getElementById("priceChange");
        priceChange.classList.toggle(
          "change-up",
          selectedPair.change.startsWith("+")
        );
        priceChange.classList.toggle(
          "change-down",
          selectedPair.change.startsWith("-")
        );

        document.getElementById("selectedPair").value = selectedPair.symbol;

        updateTradingViewChart(selectedPair.symbol);
        updateStartButton();

        // Start price simulation
        if (priceUpdateInterval) clearInterval(priceUpdateInterval);
        priceUpdateInterval = setInterval(updatePriceSimulation, 3000);
      });
    });

    // Simulate price updates
    function updatePriceSimulation() {
      if (!selectedPair) return;
      const volatility = selectedPair.type === "forex" ? 0.0005 : 0.005;
      const change = (Math.random() - 0.5) * volatility * selectedPair.price;
      selectedPair.price += change;
      const percent = ((change / (selectedPair.price - change)) * 100).toFixed(
        2
      );
      selectedPair.change = change > 0 ? `+${percent}%` : `${percent}%`;

      const priceStr =
        selectedPair.type === "forex"
          ? selectedPair.price.toFixed(5)
          : `$${selectedPair.price.toLocaleString(undefined, {
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
            })}`;
      document.getElementById("currentPrice").textContent = priceStr;
      document.getElementById("changePercent").textContent =
        selectedPair.change;

      const priceChange = document.getElementById("priceChange");
      priceChange.classList.toggle("change-up", change > 0);
      priceChange.classList.toggle("change-down", change < 0);

      if (currentChart) {
        currentChart.data.datasets[0].data.shift();
        currentChart.data.datasets[0].data.push(selectedPair.price);
        currentChart.update();
      }
    }

    // Update TradingView chart
    function updateTradingViewChart(symbol) {
      const chartContainer = document.getElementById("tradingview-chart");
      chartContainer.innerHTML = "";
      const canvas = document.createElement("canvas");
      chartContainer.appendChild(canvas);

      if (currentChart) currentChart.destroy();

      const isForex = selectedPair.type === "forex";
      let baseValue = selectedPair.price;
      const data = [];
      let currentValue = baseValue;
      for (let i = 0; i < 100; i++) {
        const volatility = isForex ? 0.0002 : 0.02;
        const change = (Math.random() - 0.5) * volatility * currentValue;
        currentValue += change;
        data.push(currentValue);
      }

      const ctx = canvas.getContext("2d");
      currentChart = new Chart(ctx, {
        type: "line",
        data: {
          labels: Array.from({ length: 100 }, (_, i) => ""),
          datasets: [
            {
              label: symbol,
              data: data,
              borderColor: "#6366f1",
              backgroundColor: "rgba(99, 102, 241, 0.1)",
              borderWidth: 2,
              fill: true,
              tension: 0.4,
              pointRadius: 0,
              pointHoverRadius: 4,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              mode: "index",
              intersect: false,
              backgroundColor: "rgba(15, 23, 42, 0.95)",
              titleColor: "#f8fafc",
              bodyColor: "#cbd5e1",
              borderColor: "rgba(99, 102, 241, 0.3)",
              borderWidth: 1,
              padding: 12,
              callbacks: {
                label: function (context) {
                  const value = context.parsed.y;
                  return isForex
                    ? value.toFixed(5)
                    : `$${value.toLocaleString(undefined, {
                        minimumFractionDigits: 2,
                      })}`;
                },
              },
            },
          },
          scales: {
            x: { display: false },
            y: { display: false },
          },
          interaction: { intersect: false, mode: "index" },
        },
      });
    }

    // Amount slider sync
    const amountInput = document.getElementById("investmentAmount");
    const amountSlider = document.getElementById("amountSlider");
    amountSlider.addEventListener("input", () => {
      amountInput.value = amountSlider.value;
      updateEstimatedReturns();
      updateCryptoRequired();
    });
    amountInput.addEventListener("input", () => {
      if (amountInput.value > 100000) amountInput.value = 100000;
      if (amountInput.value < 50) amountInput.value = 50;
      amountSlider.value = amountInput.value;
      updateEstimatedReturns();
      updateCryptoRequired();
    });

    // Plan select change
    document.getElementById("planSelect").addEventListener("change", (e) => {
      const planType = e.target.value;
      if (planType) {
        selectedPlan = userPlans.find((p) => p.planType === planType);
        selectPlan(selectedPlan);
      }
    });

    // Other select changes
    document
      .getElementById("investmentPeriod")
      .addEventListener("change", updateEstimatedReturns);
    document
      .getElementById("riskLevel")
      .addEventListener("change", updateEstimatedReturns);
    document.getElementById("paymentMethod").addEventListener("change", () => {
      updateBalanceDisplay();
      updateStartButton();
      updateCryptoRequired();
    });

    // Update estimated returns
    function updateEstimatedReturns() {
      const amount = parseFloat(amountInput.value) || 0;
      const periodStr = document.getElementById("investmentPeriod").value;
      const period =
        periodStr === "indefinite" ? Infinity : parseInt(periodStr) || 0;
      const risk = document.getElementById("riskLevel").value;

      if (!selectedPlan || amount < 50 || period === 0) {
        document.getElementById("estimatedProfitRange").textContent = "0% - 0%";
        document.getElementById("platformFee").textContent = "$0.00";
        document.getElementById("potentialReturn").textContent =
          "$0.00 - $0.00";
        return;
      }

      let minProfit = selectedPlan.profitMin;
      let maxProfit = selectedPlan.profitMax;

      const riskFactor = risk === "low" ? 0.7 : risk === "high" ? 1.3 : 1;
      minProfit *= riskFactor;
      maxProfit *= riskFactor;

      const periodFactor = period === Infinity ? 2 : 1 + (period / 30) * 0.1;
      minProfit *= periodFactor;
      maxProfit *= periodFactor;

      document.getElementById(
        "estimatedProfitRange"
      ).textContent = `${minProfit.toFixed(1)}% - ${maxProfit.toFixed(1)}%`;

      const fee = amount * 0.02;
      document.getElementById(
        "platformFee"
      ).textContent = `$${fee.toLocaleString(undefined, {
        minimumFractionDigits: 2,
      })}`;

      const minReturn = amount + amount * (minProfit / 100) - fee;
      const maxReturn = amount + amount * (maxProfit / 100) - fee;
      document.getElementById(
        "potentialReturn"
      ).textContent = `$${minReturn.toLocaleString(undefined, {
        minimumFractionDigits: 2,
      })} - $${maxReturn.toLocaleString(undefined, {
        minimumFractionDigits: 2,
      })}`;
    }

    // Update balance display based on payment method
    function updateBalanceDisplay() {
      document.getElementById("btcBalance").textContent = wallet.BTC.toFixed(6);
      document.getElementById("ethBalance").textContent = wallet.ETH.toFixed(6);
      document.getElementById("usdtBalance").textContent =
        wallet.USDT.toLocaleString(undefined, { minimumFractionDigits: 2 });

      const payment = document.getElementById("paymentMethod").value;
      if (!payment) {
        document.getElementById(
          "availableBalance"
        ).textContent = `$${wallet.totalBalance.toLocaleString()}`;
        return;
      }
      const balance = wallet[payment.toUpperCase()];
      document.getElementById(
        "availableBalance"
      ).textContent = `${balance.toFixed(6)} ${payment.toUpperCase()}`;
    }

    // Update required crypto amount
    function updateCryptoRequired() {
      const payment = document.getElementById("paymentMethod").value;
      const amount =
        parseFloat(document.getElementById("investmentAmount").value) || 0;
      if (payment && amount > 0) {
        const cryptoAmount = amount / prices[payment];
        document.getElementById(
          "cryptoRequired"
        ).textContent = `Required: ${cryptoAmount.toFixed(
          6
        )} ${payment.toUpperCase()}`;
      } else {
        document.getElementById("cryptoRequired").textContent = "";
      }
    }

    // Update start/submit buttons
    function updateStartButton() {
      const enabled =
        !!selectedPair &&
        !!selectedPlan &&
        parseFloat(amountInput.value) >= 50 &&
        !!document.getElementById("investmentPeriod").value &&
        !!document.getElementById("riskLevel").value &&
        !!document.getElementById("paymentMethod").value;
      document.getElementById("submitBtn").disabled = !enabled;
      document.getElementById("startInvestBtn").disabled = !enabled;
    }

    // Form submission
    const form = document.getElementById("investmentForm");
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      if (!selectedPair || !selectedPlan) return;

      const amount = parseFloat(amountInput.value);
      const payment = document.getElementById("paymentMethod").value;
      const cryptoAmount = amount / prices[payment];

      if (wallet[payment.toUpperCase()] < cryptoAmount) {
        alert(`Insufficient ${payment.toUpperCase()} balance`);
        return;
      }

      try {
        const res = await fetch("/dashboard/invest", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            tradingPair: selectedPair.symbol,
            botType: selectedPlan.planType,
            amount,
            period:
              document.getElementById("investmentPeriod").value === "indefinite"
                ? Infinity
                : parseInt(document.getElementById("investmentPeriod").value),
            riskLevel: document.getElementById("riskLevel").value,
            paymentMethod: payment,
          }),
        });

        if (!res.ok) throw new Error(await res.text());

        // Reload data
        await loadData();

        // Reset form
        form.reset();
        amountSlider.value = 1000;
        selectedPair = null;
        selectedPlan = null;
        document
          .querySelectorAll(".pair-card")
          .forEach((c) => c.classList.remove("selected"));
        document
          .querySelectorAll(".bot-card")
          .forEach((c) => c.classList.remove("selected"));
        document.getElementById("selectedPairDisplay").textContent =
          "Select a pair";
        document.getElementById("currentPrice").textContent = "$0.00";
        document.getElementById("changePercent").textContent = "+0.00%";
        document.getElementById("selectedPair").value = "";
        if (currentChart) currentChart.destroy();
        document.getElementById("tradingview-chart").innerHTML =
          '<div class="chart-placeholder"><i class="fas fa-chart-line"></i><p>Select a trading pair to view live chart</p></div>';
        if (priceUpdateInterval) clearInterval(priceUpdateInterval);
        updateFormState();
        updateStartButton();
        updateEstimatedReturns();
        updateBalanceDisplay();
        updateCryptoRequired();
      } catch (error) {
        alert(error.message);
      }
    });

    // Trigger form submit from ticker button
    document.getElementById("startInvestBtn").addEventListener("click", () => {
      if (!document.getElementById("startInvestBtn").disabled) {
        form.dispatchEvent(new Event("submit"));
      }
    });

    // Update active investments display
    function updateActiveInvestments() {
      const list = document.getElementById("activeInvestmentsList");
      list.innerHTML = "";
      if (activeInvestments.length > 0) {
        document.getElementById("activeInvestmentsSection").style.display =
          "block";
        activeInvestments.forEach((inv) => {
          const daysPassed = (new Date() - new Date(inv.startDate)) / 86400000;
          let daysLeft =
            inv.period === Infinity
              ? "Ongoing"
              : Math.max(0, inv.period - daysPassed).toFixed(1) + " days left";
          let progress =
            inv.period === Infinity
              ? ((daysPassed / 365) * 100) % 100
              : (daysPassed / inv.period) * 100;
          let completed = inv.period !== Infinity && daysPassed >= inv.period;

          if (completed) {
            inv.status = "completed";
            daysLeft = "Completed";
            progress = 100;
          }

          const card = document.createElement("div");
          card.className = "investment-card glass-card";
          card.innerHTML = `
            <div class="investment-header">
              <div class="investment-pair">${inv.tradingPair}</div>
              <div class="investment-plan">${inv.botType}</div>
            </div>
            <div class="investment-stats">
              <div class="stat-item">
                <div class="stat-label">Invested</div>
                <div class="stat-value">$${inv.amount.toLocaleString()}</div>
              </div>
              <div class="stat-item">
                <div class="stat-label">Profit</div>
                <div class="stat-value profit-value">${
                  inv.currentProfit > 0 ? "+" : ""
                }$${inv.currentProfit.toLocaleString(undefined, {
            minimumFractionDigits: 2,
          })}</div>
              </div>
              <div class="stat-item">
                <div class="stat-label">Status</div>
                <div class="stat-value">${daysLeft}</div>
              </div>
            </div>
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${Math.min(
                progress,
                100
              )}%"></div>
            </div>
            <button class="btn-secondary withdraw-btn" data-id="${inv._id}" ${
            completed && !inv.profitWithdrawn ? "" : "disabled"
          }>Withdraw</button>
          `;
          list.appendChild(card);
        });

        // Withdraw buttons
        document.querySelectorAll(".withdraw-btn").forEach((btn) => {
          btn.addEventListener("click", async () => {
            const id = btn.dataset.id;
            try {
              const res = await fetch(`/dashboard/invest/${id}/withdraw`, {
                method: "POST",
              });
              if (!res.ok) throw new Error(await res.text());
              await loadData();
            } catch (error) {
              alert(error.message);
            }
          });
        });
      } else {
        document.getElementById("activeInvestmentsSection").style.display =
          "none";
      }
    }

    // Poll for updates (for real-time profit)
    function startPolling() {
      profitPollingInterval = setInterval(async () => {
        try {
          const res = await fetch("/dashboard/invest/active");
          activeInvestments = await res.json();
          updateActiveInvestments();
        } catch (error) {
          console.error("Polling error:", error);
        }
      }, 5000);
    }

    // Initialize
    await loadData();
    startPolling();
    document
      .getElementById("startInvestBtn")
      .addEventListener("click", () => form.dispatchEvent(new Event("submit")));

    // Note: For /dashboard, add similar polling and display logic for real-time profits.
  });
</script>
