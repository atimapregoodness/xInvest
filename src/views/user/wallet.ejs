<%- layout('layout/acctBoilerplate', { title: 'xInvest - Dashboard' }) %> <%-
partial("partials/floatingNav") %> <%- partial('partials/sideBar') %>

<div class="dashboard">
  <section id="section1">
    <div class="balance-card">
      <div class="balance-header">
        <h5>Total Balance</h5>
        <button class="toggle-balance" id="toggleBalance">
          <i class="fas fa-eye"></i>
        </button>
      </div>

      <div class="balance-amount" id="balanceAmount">
        $<%= wallet?.totalBalance?.toLocaleString() || '0.00' %>
      </div>

      <div class="balance-actions">
        <a href="/wallet/deposit" class="balance-btn">
          <i class="fas fa-arrow-down"></i>
          <span>Deposit</span>
        </a>
        <a href="/wallet/withdraw" class="balance-btn">
          <i class="fas fa-arrow-up"></i>
          <span>Withdraw</span>
        </a>
        <a href="/invest" class="balance-btn">
          <i class="fas fa-chart-line"></i>
          <span>Invest</span>
        </a>
      </div>

      <div class="asset-table-container">
        <table class="asset-table">
          <thead>
            <tr>
              <th class="asset-th">Asset</th>
              <th class="symbol-th">Symbol</th>
              <th class="value-th">Value</th>
            </tr>
          </thead>
          <tbody>
            <!-- BTC -->
            <tr class="asset-row" data-symbol="BTC">
              <td class="asset-name-cell">
                <div class="asset-icon asset-btc">
                  <i class="fab fa-bitcoin"></i>
                </div>
                <div class="asset-name">Bitcoin</div>
              </td>
              <td class="asset-symbol-cell">
                <div class="asset-holding" id="btc-holding">
                  <%= wallet?.BTC?.toFixed(6) || '0.000000' %> BTC
                </div>
                <div class="asset-live-price" id="btc-live-price">$0.00</div>
              </td>
              <td class="asset-value-cell">
                <div class="asset-value" id="btc-value">$0.00</div>
              </td>
            </tr>

            <!-- ETH -->
            <tr class="asset-row" data-symbol="ETH">
              <td class="asset-name-cell">
                <div class="asset-icon asset-eth">
                  <i class="fab fa-ethereum"></i>
                </div>
                <div class="asset-name">Ethereum</div>
              </td>
              <td class="asset-symbol-cell">
                <div class="asset-holding" id="eth-holding">
                  <%= wallet?.ETH?.toFixed(4) || '0.0000' %> ETH
                </div>
                <div class="asset-live-price" id="eth-live-price">$0.00</div>
              </td>
              <td class="asset-value-cell">
                <div class="asset-value" id="eth-value">$0.00</div>
              </td>
            </tr>

            <!-- USDT -->
            <tr class="asset-row" data-symbol="USDT">
              <td class="asset-name-cell">
                <div class="asset-icon asset-usdt">
                  <i class="fas fa-dollar-sign"></i>
                </div>
                <div class="asset-name">Tether</div>
              </td>
              <td class="asset-symbol-cell">
                <div class="asset-holding" id="usdt-holding">
                  $<%= wallet?.USDT?.toLocaleString() || '0' %> USDT
                </div>
                <div class="asset-live-price" id="usdt-live-price">$1.00</div>
              </td>
              <td class="asset-value-cell">
                <div class="asset-value" id="usdt-value">$0.00</div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
    <div class="transactions-table-container">
      <table class="transactions-table">
        <thead>
          <tr>
            <th class="type-th">Type</th>
            <th class="details-th">Details</th>
            <th class="amount-th">Amount</th>
          </tr>
        </thead>
        <tbody>
          <% transactions.forEach(transaction => { %>
          <tr class="transaction-row" data-status="<%= transaction.status %>">
            <!-- COLUMN 1: TYPE -->
            <td class="type-cell">
              <div class="type-icon <%= transaction.type %>-icon">
                <% if (transaction.type === 'deposit') { %>
                <i class="fas fa-arrow-down"></i>
                <% } else if (transaction.type === 'withdrawal') { %>
                <i class="fas fa-arrow-up"></i>
                <% } else if (transaction.type === 'investment') { %>
                <i class="fas fa-chart-line"></i>
                <% } else if (transaction.type === 'profit') { %>
                <i class="fas fa-coins"></i>
                <% } else if (transaction.type === 'transfer') { %>
                <i class="fas fa-exchange-alt"></i>
                <% } else if (transaction.type === 'fee') { %>
                <i class="fas fa-minus-circle"></i>
                <% } else if (transaction.type === 'bonus') { %>
                <i class="fas fa-gift"></i>
                <% } %>
              </div>
              <div class="type-name">
                <%= transaction.type.charAt(0).toUpperCase() +
                transaction.type.slice(1) %>
              </div>
              <div class="type-status <%= transaction.status %>">
                <%= transaction.status.charAt(0).toUpperCase() +
                transaction.status.slice(1) %>
              </div>
            </td>

            <!-- COLUMN 2: DETAILS -->
            <td class="details-cell">
              <div class="currency"><%= transaction.currency %></div>
              <% if (transaction.description) { %>
              <div class="description"><%= transaction.description %></div>
              <% } %> <% if (transaction.txHash) { %>
              <div class="tx-hash">
                TX: <%= transaction.txHash.substring(0, 10) %>...
              </div>
              <% } %>
              <div class="date">
                <%= new Date(transaction.createdAt).toLocaleDateString() %> <%=
                new Date(transaction.createdAt).toLocaleTimeString([], {hour:
                '2-digit', minute:'2-digit'}) %>
              </div>
            </td>

            <!-- COLUMN 3: AMOUNT -->
            <td class="amount-cell">
              <div
                class="net-amount <%= transaction.type === 'fee' ? 'negative' : '' %>"
              >
                <%= transaction.type === 'fee' ? '-' : '' %><%=
                transaction.netAmount.toFixed(4) %> <%= transaction.currency %>
              </div>
              <% if (transaction.fee > 0) { %>
              <div class="fee">
                Fee: -<%= transaction.fee.toFixed(4) %> <%= transaction.currency
                %>
              </div>
              <% } %>
            </td>
          </tr>
          <% }) %> <% if (transactions.length === 0) { %>
          <tr class="no-transactions">
            <td colspan="3" class="text-center">
              <i class="fas fa-inbox"></i>
              <div>No transactions yet</div>
            </td>
          </tr>
          <% } %>
        </tbody>
      </table>
    </div>
  </section>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Toggle balance visibility
    const toggleBtn = document.getElementById('toggleBalance');
    const balanceAmount = document.getElementById('balanceAmount');
    let isHidden = false;

    toggleBtn.addEventListener('click', () => {
      isHidden = !isHidden;
      if (isHidden) {
        balanceAmount.textContent = '******';
        toggleBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
      } else {
        balanceAmount.textContent = '$<%= wallet?.totalBalance?.toLocaleString() || "0.00" %>';
        toggleBtn.innerHTML = '<i class="fas fa-eye"></i>';
      }
    });

    // Get wallet data (JSON safe)
    const walletData = <%- JSON.stringify(wallet || {}) %>;

    // Auto-update every 30 seconds
    setInterval(updatePrices, 30000);

    // Initial load
    updatePrices();

    async function updatePrices() {
      try {
        const response = await fetch(
          'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,tether&vs_currencies=usd&include_24hr_change=true'
        );

        if (!response.ok) throw new Error('API Error');

        const data = await response.json();

        // BTC
        const btcPrice = data.bitcoin.usd;
        const btcHolding = walletData.BTC || 0;
        document.getElementById('btc-price').textContent = `$${btcPrice.toLocaleString()}`;
        document.getElementById('btc-value').textContent = `$${(btcPrice * btcHolding).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;

        const btcChange = document.getElementById('btc-change');
        const btcChangePercent = data.bitcoin.usd_24h_change;
        btcChange.textContent = `${btcChangePercent >= 0 ? '+' : ''}${btcChangePercent.toFixed(2)}%`;
        btcChange.className = `asset-change ${btcChangePercent >= 0 ? 'positive' : 'negative'}`;

        // ETH
        const ethPrice = data.ethereum.usd;
        const ethHolding = walletData.ETH || 0;
        document.getElementById('eth-price').textContent = `$${ethPrice.toLocaleString()}`;
        document.getElementById('eth-value').textContent = `$${(ethPrice * ethHolding).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;

        const ethChange = document.getElementById('eth-change');
        const ethChangePercent = data.ethereum.usd_24h_change;
        ethChange.textContent = `${ethChangePercent >= 0 ? '+' : ''}${ethChangePercent.toFixed(2)}%`;
        ethChange.className = `asset-change ${ethChangePercent >= 0 ? 'positive' : 'negative'}`;

        // USDT
        const usdtPrice = data.tether.usd;
        const usdtHolding = walletData.USDT || 0;
        document.getElementById('usdt-price').textContent = `$${usdtPrice.toFixed(4)}`;
        document.getElementById('usdt-value').textContent = `$${usdtHolding.toLocaleString()}`;

        const usdtChange = document.getElementById('usdt-change');
        const usdtChangePercent = data.tether.usd_24h_change;
        usdtChange.textContent = `${usdtChangePercent >= 0 ? '+' : ''}${usdtChangePercent.toFixed(2)}%`;
        usdtChange.className = `asset-change ${usdtChangePercent >= 0 ? 'positive' : 'negative'}`;

        // Update total balance (sum of all values)
        const totalBalance = (btcPrice * btcHolding) + (ethPrice * ethHolding) + usdtHolding;
        if (!isHidden) {
          balanceAmount.textContent = `$${totalBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
        }

      } catch (error) {
        console.error('Price update failed:', error);

        // Fallback static prices
        document.getElementById('btc-price').textContent = '$67,850';
        document.getElementById('eth-price').textContent = '$3,450';
        document.getElementById('usdt-price').textContent = '$1.0000';
      }
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Toggle balance visibility
    const toggleBtn = document.getElementById('toggleBalance');
    const balanceAmount = document.getElementById('balanceAmount');
    let isHidden = false;

    toggleBtn.addEventListener('click', () => {
      isHidden = !isHidden;
      if (isHidden) {
        balanceAmount.textContent = '******';
        toggleBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
      } else {
        updateTotalBalance(); // Show real total
        toggleBtn.innerHTML = '<i class="fas fa-eye"></i>';
      }
    });

    // Get wallet data
    const walletData = <%- JSON.stringify(wallet || {}) %>;

    // Auto-update every 30 seconds
    setInterval(updatePrices, 30000);

    // Initial load
    updatePrices();

    async function updatePrices() {
      try {
        const response = await fetch(
          'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,tether&vs_currencies=usd&include_24hr_change=true'
        );

        if (!response.ok) throw new Error('API Error');

        const data = await response.json();

        // BTC
        const btcPrice = data.bitcoin.usd;
        const btcHolding = walletData.BTC || 0;
        const btcValue = btcPrice * btcHolding;

        document.getElementById('btc-live-price').textContent = `$${btcPrice.toLocaleString()}`;
        document.getElementById('btc-value').textContent = `$${btcValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;

        // ETH
        const ethPrice = data.ethereum.usd;
        const ethHolding = walletData.ETH || 0;
        const ethValue = ethPrice * ethHolding;

        document.getElementById('eth-live-price').textContent = `$${ethPrice.toLocaleString()}`;
        document.getElementById('eth-value').textContent = `$${ethValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;

        // USDT
        const usdtPrice = data.tether.usd;
        const usdtHolding = walletData.USDT || 0;
        const usdtValue = usdtHolding;

        document.getElementById('usdt-live-price').textContent = `$${usdtPrice.toFixed(4)}`;
        document.getElementById('usdt-value').textContent = `$${usdtValue.toLocaleString()}`;

        // Update total balance
        updateTotalBalance();

      } catch (error) {
        console.error('Price update failed:', error);

        // Fallback
        document.getElementById('btc-live-price').textContent = '$67,850';
        document.getElementById('eth-live-price').textContent = '$3,450';
        document.getElementById('usdt-live-price').textContent = '$1.0000';
      }
    }

    function updateTotalBalance() {
      const btcValue = parseFloat(document.getElementById('btc-value').textContent.replace(/[$,]/g, '')) || 0;
      const ethValue = parseFloat(document.getElementById('eth-value').textContent.replace(/[$,]/g, '')) || 0;
      const usdtValue = parseFloat(document.getElementById('usdt-value').textContent.replace(/[$,]/g, '')) || 0;

      const total = btcValue + ethValue + usdtValue;
      if (!isHidden) {
        balanceAmount.textContent = `$${total.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
      }
    }
  });
</script>
