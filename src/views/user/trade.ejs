<%- layout('layout/acctBoilerplate', { title: 'Finovex - Trade' }) %> <%-
partial("partials/floatingNav") %> <%- partial("partials/sideBar") %>

<div class="dashboard container mt-5">
  <div class="text-center mb-4">
    <h2 class="fw-bold text-white">Trade Dashboard</h2>
    <p class="text-secondary">Start and monitor your active trades</p>
  </div>

  <div class="glass-card p-4 mb-4 text-white rounded-4 shadow">
    <form id="tradeForm">
      <div class="row g-3 align-items-center">
        <div class="col-md-3">
          <label class="form-label">Trading Pair</label>
          <select class="form-select" name="tradingPair" required>
            <option value="">Select Pair</option>
            <option>BTC/USDT</option>
            <option>ETH/USDT</option>
            <option>BNB/USDT</option>
          </select>
        </div>

        <div class="col-md-3">
          <label class="form-label">Amount</label>
          <input
            type="number"
            step="any"
            class="form-control"
            name="amount"
            placeholder="Enter amount"
            required
          />
        </div>

        <div class="col-md-3">
          <label class="form-label">Plan</label>
          <select class="form-select" name="planId" required>
            <% plans.forEach(plan => { %>
            <option value="<%= plan._id %>">
              <%= plan.name %> - <%= plan.roi %>% ROI
            </option>
            <% }) %>
          </select>
        </div>

        <div class="col-md-3">
          <label class="form-label">Currency</label>
          <select class="form-select" name="currency" required>
            <option value="">Select Currency</option>
            <option value="USDT">USDT</option>
            <option value="BTC">BTC</option>
            <option value="ETH">ETH</option>
          </select>
        </div>
      </div>

      <div class="text-center mt-4">
        <button type="submit" class="btn btn-primary px-4 py-2">
          Start Trade
        </button>
      </div>
    </form>
  </div>

  <div class="glass-card p-4 text-white rounded-4 shadow">
    <h5 class="mb-3 fw-bold">Active Trades</h5>
    <div class="table-responsive">
      <table class="table text-white align-middle">
        <thead>
          <tr>
            <th>Pair</th>
            <th>Amount</th>
            <th>ROI</th>
            <th>Live Profit</th>
            <th>Progress</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody id="tradesTableBody">
          <tr>
            <td colspan="6" class="text-center text-secondary">Loading...</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tradeForm = document.getElementById("tradeForm");
    const tradesTableBody = document.getElementById("tradesTableBody");

    async function loadTrades() {
      try {
        const res = await fetch("/dashboard/trade/status");
        const data = await res.json();
        if (
          !data.success ||
          !Array.isArray(data.trades) ||
          data.trades.length === 0
        ) {
          tradesTableBody.innerHTML =
            '<tr><td colspan="6" class="text-center text-secondary">No active trades</td></tr>';
          return;
        }

        tradesTableBody.innerHTML = data.trades
          .map((t) => {
            const profit = (t.simulatedProfit ?? 0).toFixed(8);
            const progress = (t.progress ?? 0).toFixed(0);
            const badge = t.status === "active" ? "warning" : "success";

            return `
          <tr id="trade-${t._id}">
            <td>${t.tradingPair}</td>
            <td>${t.amount.toFixed(8)} ${t.currency}</td>
            <td>${t.roi}%</td>
            <td class="profit-live">${profit} ${t.currency}</td>
            <td>
              <div class="progress" style="height:8px"><div class="progress-bar progress-fill bg-success" style="width:${progress}%"></div></div>
            </td>
            <td><span class="badge bg-${badge} trade-status">${
              t.status
            }</span></td>
          </tr>`;
          })
          .join("");
      } catch (err) {
        console.error("loadTrades error", err);
      }
    }

    tradeForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(tradeForm);
      const payload = Object.fromEntries(formData.entries());

      try {
        const res = await fetch("/dashboard/trade/start", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "CSRF-Token": "<%= csrfToken %>",
          },
          body: JSON.stringify(payload),
        });
        const body = await res.json();
        if (res.ok && body.success) {
          alert("Trade started");
          tradeForm.reset();
          loadTrades();
        } else {
          alert(body.error || body.message || "Failed to start trade");
        }
      } catch (err) {
        console.error("start error", err);
        alert("Unexpected error");
      }
    });

    async function refreshStatus() {
      try {
        const res = await fetch("/dashboard/trade/status");
        const payload = await res.json();
        if (!payload.success) return;
        payload.trades.forEach((t) => {
          const el = document.getElementById("trade-" + t._id);
          if (!el) return;
          const profitEl = el.querySelector(".profit-live");
          const progressFill = el.querySelector(".progress-fill");
          const statusEl = el.querySelector(".trade-status");

          // small client micro-jitter
          const micro = Math.random() * 0.02 - 0.01;
          let display = (t.simulatedProfit ?? 0) * (1 + micro);
          if (t.status === "completed") display = t.profit ?? t.simulatedProfit;

          if (profitEl)
            profitEl.textContent = display.toFixed(8) + " " + t.currency;
          if (progressFill) progressFill.style.width = (t.progress ?? 0) + "%";
          if (statusEl) statusEl.textContent = t.status;
        });
      } catch (err) {
        console.error("refreshStatus error", err);
      }
    }

    loadTrades();
    setInterval(() => {
      loadTrades();
      refreshStatus();
    }, 10000);
  });
</script>
