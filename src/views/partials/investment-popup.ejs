<style>
  .investment-popup {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 1050;
    max-width: 320px;
    animation: slideInUp 0.5s ease-out;
  }

  .popup-card {
    background: linear-gradient(145deg, var(--secondary), var(--darker));
    border: 1px solid var(--glass-border);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    backdrop-filter: blur(10px);
    overflow: hidden;
    margin-bottom: 10px;
    transition: all 0.3s ease;
  }

  .popup-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg), 0 10px 30px rgba(15, 184, 150, 0.2);
  }

  .popup-header {
    padding: 12px 16px;
    border-bottom: 1px solid var(--glass-border);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .popup-badge {
    background: var(--primary);
    color: white;
    padding: 4px 8px;
    border-radius: 20px;
    font-size: 0.7rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .popup-close {
    background: none;
    border: none;
    color: var(--text-muted);
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: var(--transition);
  }

  .popup-close:hover {
    color: var(--text);
    background: var(--glass);
  }

  .popup-body {
    padding: 16px;
  }

  .popup-user {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
  }

  .user-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 10px;
    border: 2px solid var(--primary);
  }

  .user-info {
    flex: 1;
  }

  .user-name {
    font-weight: 600;
    color: var(--text);
    font-size: 0.9rem;
  }

  .user-location {
    color: var(--text-muted);
    font-size: 0.75rem;
  }

  .popup-amount {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--success);
    margin-bottom: 8px;
  }

  .popup-details {
    color: var(--text-secondary);
    font-size: 0.85rem;
    line-height: 1.4;
  }

  .popup-plan {
    color: var(--accent);
    font-weight: 600;
  }

  .popup-time {
    color: var(--text-muted);
    font-size: 0.75rem;
    margin-top: 8px;
    display: flex;
    align-items: center;
  }

  .popup-time i {
    margin-right: 4px;
  }

  /* Animation */
  @keyframes slideInUp {
    from {
      transform: translateY(100px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  .popup-fade-out {
    animation: fadeOut 0.5s ease-in forwards;
  }

  /* Progress bar for withdrawal */
  .withdrawal-progress {
    height: 4px;
    background: var(--glass);
    border-radius: 2px;
    margin-top: 8px;
    overflow: hidden;
  }

  .progress-bar {
    height: 100%;
    background: var(--success);
    border-radius: 2px;
    transition: width 0.3s ease;
  }

  /* Different types */
  .popup-withdrawal .popup-badge {
    background: var(--warning);
  }

  .popup-earning .popup-badge {
    background: var(--success);
  }

  .popup-investment .popup-badge {
    background: var(--info);
  }

  .popup-trading .popup-badge {
    background: var(--primary);
  }
</style>

<div class="investment-popup" id="investmentPopupContainer">
  <!-- Popups will be dynamically added here -->
</div>

<script>
  // Sample data for realistic notifications
  const sampleUsers = [
    {
      name: "Michael Chen",
      location: "Singapore",
      avatar: "https://i.pravatar.cc/150?img=1",
    },
    {
      name: "Sarah Johnson",
      location: "London, UK",
      avatar: "https://i.pravatar.cc/150?img=5",
    },
    {
      name: "Alex Rodriguez",
      location: "New York, USA",
      avatar: "https://i.pravatar.cc/150?img=8",
    },
    {
      name: "Emma Wilson",
      location: "Sydney, AU",
      avatar: "https://i.pravatar.cc/150?img=11",
    },
    {
      name: "James Miller",
      location: "Toronto, CA",
      avatar: "https://i.pravatar.cc/150?img=12",
    },
    {
      name: "Lisa Thompson",
      location: "Berlin, DE",
      avatar: "https://i.pravatar.cc/150?img=15",
    },
    {
      name: "Robert Kim",
      location: "Seoul, KR",
      avatar: "https://i.pravatar.cc/150?img=20",
    },
    {
      name: "Maria Garcia",
      location: "Madrid, ES",
      avatar: "https://i.pravatar.cc/150?img=25",
    },
  ];

  const investmentPlans = [
    { name: "Wealth Builder", min: 1000, max: 10000 },
    { name: "Premium Growth", min: 10000, max: 50000 },
    { name: "Elite Portfolio", min: 50000, max: 200000 },
  ];

  // Generate random amount within range
  function getRandomAmount(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  // Format currency
  function formatCurrency(amount) {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  }

  // Generate random time ago
  function getRandomTimeAgo() {
    const times = [
      "Just now",
      "1 minute ago",
      "2 minutes ago",
      "5 minutes ago",
      "10 minutes ago",
      "15 minutes ago",
      "30 minutes ago",
    ];
    return times[Math.floor(Math.random() * times.length)];
  }

  // Create withdrawal notification
  function createWithdrawalNotification() {
    const user = sampleUsers[Math.floor(Math.random() * sampleUsers.length)];
    const amount = getRandomAmount(500, 15000);

    return {
      type: "withdrawal",
      html: `
      <div class="popup-card popup-withdrawal">
        <div class="popup-header">
          <span class="popup-badge">Withdrawal Processed</span>
          <button class="popup-close">&times;</button>
        </div>
        <div class="popup-body">
          <div class="popup-user">
            <img src="${user.avatar}" alt="${user.name}" class="user-avatar">
            <div class="user-info">
              <div class="user-name">${user.name}</div>
              <div class="user-location">${user.location}</div>
            </div>
          </div>
          <div class="popup-amount">${formatCurrency(amount)}</div>
          <div class="popup-details">
            Withdrawal to bank account completed successfully
          </div>
          <div class="withdrawal-progress">
            <div class="progress-bar" style="width: 100%"></div>
          </div>
          <div class="popup-time">
            <i class="fas fa-check-circle text-success"></i>
            ${getRandomTimeAgo()}
          </div>
        </div>
      </div>
    `,
    };
  }

  // Create earning notification
  function createEarningNotification() {
    const user = sampleUsers[Math.floor(Math.random() * sampleUsers.length)];
    const amount = getRandomAmount(50, 2000);

    return {
      type: "earning",
      html: `
      <div class="popup-card popup-earning">
        <div class="popup-header">
          <span class="popup-badge">Profit Earned</span>
          <button class="popup-close">&times;</button>
        </div>
        <div class="popup-body">
          <div class="popup-user">
            <img src="${user.avatar}" alt="${user.name}" class="user-avatar">
            <div class="user-info">
              <div class="user-name">${user.name}</div>
              <div class="user-location">${user.location}</div>
            </div>
          </div>
          <div class="popup-amount">+${formatCurrency(amount)}</div>
          <div class="popup-details">
            Monthly profit from <span class="popup-plan">Premium Growth</span> portfolio
          </div>
          <div class="popup-time">
            <i class="fas fa-chart-line text-accent"></i>
            ${getRandomTimeAgo()}
          </div>
        </div>
      </div>
    `,
    };
  }

  // Create investment notification
  function createInvestmentNotification() {
    const user = sampleUsers[Math.floor(Math.random() * sampleUsers.length)];
    const plan =
      investmentPlans[Math.floor(Math.random() * investmentPlans.length)];
    const amount = getRandomAmount(plan.min, plan.max);

    return {
      type: "investment",
      html: `
      <div class="popup-card popup-investment">
        <div class="popup-header">
          <span class="popup-badge">New Investment</span>
          <button class="popup-close">&times;</button>
        </div>
        <div class="popup-body">
          <div class="popup-user">
            <img src="${user.avatar}" alt="${user.name}" class="user-avatar">
            <div class="user-info">
              <div class="user-name">${user.name}</div>
              <div class="user-location">${user.location}</div>
            </div>
          </div>
          <div class="popup-amount">${formatCurrency(amount)}</div>
          <div class="popup-details">
            Started <span class="popup-plan">${plan.name}</span> investment plan
          </div>
          <div class="popup-time">
            <i class="fas fa-rocket text-info"></i>
            ${getRandomTimeAgo()}
          </div>
        </div>
      </div>
    `,
    };
  }

  // Create trading notification
  function createTradingNotification() {
    const user = sampleUsers[Math.floor(Math.random() * sampleUsers.length)];
    const profit = getRandomAmount(100, 5000);

    return {
      type: "trading",
      html: `
      <div class="popup-card popup-trading">
        <div class="popup-header">
          <span class="popup-badge">Trade Executed</span>
          <button class="popup-close">&times;</button>
        </div>
        <div class="popup-body">
          <div class="popup-user">
            <img src="${user.avatar}" alt="${user.name}" class="user-avatar">
            <div class="user-info">
              <div class="user-name">${user.name}</div>
              <div class="user-location">${user.location}</div>
            </div>
          </div>
          <div class="popup-amount" style="color: var(--success);">+${formatCurrency(
            profit
          )}</div>
          <div class="popup-details">
            Successful EUR/USD trade with 85% accuracy
          </div>
          <div class="popup-time">
            <i class="fas fa-bolt text-warning"></i>
            ${getRandomTimeAgo()}
          </div>
        </div>
      </div>
    `,
    };
  }

  // Show a random notification
  function showRandomNotification() {
    const container = document.getElementById("investmentPopupContainer");
    if (!container) return;

    // Clear existing notifications if too many
    const existingPopups = container.children;
    if (existingPopups.length >= 3) {
      container.removeChild(existingPopups[0]);
    }

    // Create new notification
    const notifications = [
      createWithdrawalNotification,
      createEarningNotification,
      createInvestmentNotification,
      createTradingNotification,
    ];

    const notification =
      notifications[Math.floor(Math.random() * notifications.length)]();
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = notification.html;
    const newPopup = tempDiv.firstElementChild;

    // Add to container
    container.appendChild(newPopup);

    // Add close functionality
    const closeBtn = newPopup.querySelector(".popup-close");
    closeBtn.addEventListener("click", function () {
      newPopup.classList.add("popup-fade-out");
      setTimeout(() => {
        if (newPopup.parentNode) {
          newPopup.parentNode.removeChild(newPopup);
        }
      }, 500);
    });

    // Auto-remove after 8 seconds
    setTimeout(() => {
      if (newPopup.parentNode) {
        newPopup.classList.add("popup-fade-out");
        setTimeout(() => {
          if (newPopup.parentNode) {
            newPopup.parentNode.removeChild(newPopup);
          }
        }, 500);
      }
    }, 8000);
  }

  // Initialize the notification system
  document.addEventListener("DOMContentLoaded", function () {
    // Show first notification after 3 seconds
    setTimeout(showRandomNotification, 3000);

    // Show subsequent notifications at random intervals (5-15 seconds)
    function scheduleNextNotification() {
      const delay = Math.random() * 10000 + 5000; // 5-15 seconds
      setTimeout(() => {
        showRandomNotification();
        scheduleNextNotification();
      }, delay);
    }

    scheduleNextNotification();
  });

  // Optional: Manual control for testing
  window.investmentNotifications = {
    showWithdrawal: () => {
      const notification = createWithdrawalNotification();
      showCustomNotification(notification.html);
    },
    showEarning: () => {
      const notification = createEarningNotification();
      showCustomNotification(notification.html);
    },
    showInvestment: () => {
      const notification = createInvestmentNotification();
      showCustomNotification(notification.html);
    },
    showTrading: () => {
      const notification = createTradingNotification();
      showCustomNotification(notification.html);
    },
  };

  function showCustomNotification(html) {
    const container = document.getElementById("investmentPopupContainer");
    if (!container) return;

    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = html;
    const newPopup = tempDiv.firstElementChild;

    container.appendChild(newPopup);

    const closeBtn = newPopup.querySelector(".popup-close");
    closeBtn.addEventListener("click", function () {
      newPopup.classList.add("popup-fade-out");
      setTimeout(() => {
        if (newPopup.parentNode) {
          newPopup.parentNode.removeChild(newPopup);
        }
      }, 500);
    });

    setTimeout(() => {
      if (newPopup.parentNode) {
        newPopup.classList.add("popup-fade-out");
        setTimeout(() => {
          if (newPopup.parentNode) {
            newPopup.parentNode.removeChild(newPopup);
          }
        }, 500);
      }
    }, 8000);
  }
</script>
