<!-- FANCY PAGE LOADER - FULLSCREEN OVERLAY -->
<div id="pageLoader" class="page-loader">
  <div class="loader-container">
    <!-- MAIN LOGO SPINNER -->
    <div class="loader-logo">
      <i class="fas fa-chart-line"></i>
      <h3>xInvest</h3>
    </div>

    <!-- ANIMATED PROGRESS BAR -->
    <div class="progress-container">
      <div class="progress-bar">
        <div class="progress-fill"></div>
      </div>
      <span class="progress-text">Loading...</span>
    </div>

    <!-- ANIMATED DOTS -->
    <div class="loading-dots">
      <span></span>
      <span></span>
      <span></span>
    </div>

    <!-- STATUS TEXT -->
    <div class="loader-status">
      <span class="status-text">Initializing Trading Dashboard</span>
    </div>
  </div>
</div>

<script>
  class PageLoader {
    constructor() {
      this.loader = document.getElementById("pageLoader");
      this.progressBar = this.loader.querySelector(".progress-fill");
      this.progressText = this.loader.querySelector(".progress-text");
      this.statusText = this.loader.querySelector(".status-text");
      this.progress = 0;
      this.progressTimer = null;
      this.activeRequests = 0;
      this.isVisible = false;

      this.init();
    }

    init() {
      // Show immediately on page load
      this.show();

      // Hide when window finishes loading
      window.addEventListener("load", () => this.complete());

      // Monitor HTTP requests
      this.interceptRequests();

      // Animate rotating status messages
      this.updateStatusMessages();
    }

    show() {
      if (this.isVisible) return; // Avoid multiple triggers
      this.isVisible = true;
      this.loader.classList.remove("hidden");
      document.body.style.overflow = "hidden";

      this.progress = 0;
      this.updateProgress(0);
      this.simulateProgress();
    }

    hide() {
      if (!this.isVisible) return;
      this.isVisible = false;
      this.stopSimulatedProgress();

      this.progress = 100;
      this.updateProgress(100);

      setTimeout(() => {
        this.loader.classList.add("hidden");
        document.body.style.overflow = "";
      }, 400); // smooth fade
    }

    simulateProgress() {
      this.stopSimulatedProgress();
      this.progressTimer = setInterval(() => {
        if (this.progress < 90) {
          this.progress += Math.random() * 8; // natural step
          this.updateProgress(this.progress);
        }
      }, 180);
    }

    stopSimulatedProgress() {
      if (this.progressTimer) {
        clearInterval(this.progressTimer);
        this.progressTimer = null;
      }
    }

    complete() {
      this.stopSimulatedProgress();
      this.updateProgress(100);
      setTimeout(() => this.hide(), 600);
    }

    updateProgress(value) {
      this.progressBar.style.width = `${value}%`;
      this.progressText.textContent = `Loading... ${Math.round(value)}%`;
    }

    interceptRequests() {
      // FETCH INTERCEPTOR
      const originalFetch = window.fetch;
      window.fetch = async (...args) => {
        this.activeRequests++;
        this.show();

        try {
          const response = await originalFetch(...args);
          return response;
        } finally {
          this.activeRequests--;
          if (this.activeRequests <= 0) this.complete();
        }
      };

      // XHR INTERCEPTOR
      const open = XMLHttpRequest.prototype.open;
      const send = XMLHttpRequest.prototype.send;
      const self = this;

      XMLHttpRequest.prototype.open = function (...args) {
        open.apply(this, args);
        this._tracked = true;
      };

      XMLHttpRequest.prototype.send = function (...args) {
        if (this._tracked) {
          self.activeRequests++;
          self.show();
          this.addEventListener("loadend", () => {
            self.activeRequests--;
            if (self.activeRequests <= 0) self.complete();
          });
        }
        send.apply(this, args);
      };
    }

    updateStatusMessages() {
      const messages = [
        "Initializing Trading Dashboard",
        "Loading Market Data",
        "Connecting to Exchange",
        "Setting up AI Bots",
        "Preparing Wallet",
        "Finalizing Security",
        "Ready to Trade!",
      ];

      let index = 0;
      setInterval(() => {
        if (!this.isVisible) return;
        this.statusText.textContent = messages[index];
        index = (index + 1) % messages.length;
      }, 2000);
    }

    // Static control
    static showLoader() {
      window.pageLoaderInstance?.show();
    }

    static hideLoader() {
      window.pageLoaderInstance?.complete();
    }
  }

  // Initialize single instance globally
  document.addEventListener("DOMContentLoaded", () => {
    window.pageLoaderInstance = new PageLoader();
  });

  // Global helpers
  window.showLoader = () => PageLoader.showLoader();
  window.hideLoader = () => PageLoader.hideLoader();
</script>
